09-07-2024
Time Complexity

O(n): Time complexity of a simple loop when the loop variable is incremented or decremented by a constant amount

O(logn) : Time complexity of a loop when the loop variable is divided or multiplied by a constant amount

O(n^2): Time complexity of a nested loop

---------------------------------------------------------------------------------------------------------
### Linear Seacrh for an array with O(n) notation ### 

class main {
    public static void main(String[] args) {
        int n[]={10,9,7,5,3,1};
        int t=1;
        int result = ls(n,t) ;
        
        if(result != -1)
           System.out.println("element found "+(result+1));
        else 
           System.out.println("element not found");
    }

    public static int ls(int[] n,int t){
         for(int i=0; i < n.length; i++){
              if(n[i]==t)
              return i;
         }
    return -1;
    }
}

--------------------------------------------------------------------------------------------------------------


QUEUE -- Followes first in first out principal where the elemeent that comes first goes out first

Stack -- Followes last in first out where the element that comes in last goes out last


ARRAY -- Collecction of similar types of elements in an object(arrray)

example:> int[] num ={1,3,5,7,9,11,13}

uses index value num[3] //5

---------------------------------------------------------------------------------------------------------------
Binary Search

class main {
    public static void main(String[] args) {
        int n[] = {1, 2, 3, 4, 5, 6};
        int t = 1;
        int result = ls(n, t);

        if (result != -1)
            System.out.println("element found at index " + (result + 1));
        else
            System.out.println("element not found");
    }

    public static int ls(int[] n, int t) {
        int l = 0;
        int r = n.length - 1;

        while (l <= r) {
            int mid = (l + r) / 2;

            if (n[mid] == t) {
                return mid;
            } else if (n[mid] < t) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }

        return -1; // Return -1 if element is not found
    }
}
-----------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------
## > Palindrome problem

A palindrome is a sequence of characters (such as a word, phrase, number, or other sequence) that reads the same backward 
as forward. In simpler terms, if you reverse the sequence of characters and it remains identical to the original sequence, 
then that sequence is called a palindrome.

Examples of palindromes include:

Words: "radar", "level", "madam", "racecar"
Phrases: "A man, a plan, a canal, Panama!", "Madam, in Eden, I'm Adam."
Numbers: 121, 1331, 12321
The concept of palindromes is not limited to just alphabetic characters but can apply to any sequence of characters,
including digits and punctuation marks, as long as the sequence reads the same backward and forward. Palindromes are
often used as exercises in programming and puzzles due to their simple yet intriguing nature


QUESTION >>Given an integer x, return true if x is a palindrome, and false otherwise.
ANSWER>>
class Solution {
    public boolean isPalindrome(int x) {
        if (x < 0) {
            return false;
        }
        int reversed = 0;
        int original = x;
        while (x != 0) {
            int digit = x % 10;
            reversed = reversed * 10 + digit;
            x /= 10;
        }
        return original == reversed;
    }
}
--------------------------------------------------------------------------------------------------------------



Insertion Sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time.
It is much like the way you might sort playing cards in your hands.


class InsertionSort {
    public static void main(String[] args) {
        int[] array = {5, 2, 8, 4, 5};

        System.out.println("Array before sorting:");
        printArray(array);

        insertionSort(array);

        System.out.println("\nArray after sorting:");
        printArray(array);
    }

    public static void insertionSort(int[] array) {
        int n = array.length;
        for (int i = 1; i < n; i++) {
            int key = array[i];
            int j = i - 1;

            // Move elements of array[0..i-1], that are greater than key, to one position ahead of their current position
            while (j >= 0 && array[j] > key) {
                array[j + 1] = array[j];
                j--;
            }
            array[j + 1] = key;
        }
    }

    public static void printArray(int[] array) {
        for (int num : array) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}

Explaintion

### Example Step-by-Step:

Given array: `{5, 2, 8, 4, 5}`

1. **Initial Array:**
   ```
   Array before sorting:
   5 2 8 4 5
   ```

2. **Starting the Sorting Process:**
   - The outer loop begins with `i = 1`. This assumes the element at index `0` is already considered sorted.
   - `key = array[1] = 2`
   - `j = i - 1 = 0`

3. **Inner Loop Execution:**
   - `while (j >= 0 && array[j] > key)` evaluates to `while (0 >= 0 && 5 > 2)` which is true.
   - Shift `5` one position to the right:
     ```
     array[1] = array[0]
     Array becomes: 5 5 8 4 5
     ```
   - Decrement `j`: `j--` becomes `-1`.

4. **Insert Key into Sorted Position:**
   - Set `array[j + 1] = key`: `array[-1 + 1] = 2`
   - Array becomes: `2 5 8 4 5`

5. **Next Iteration (i = 2):**
   - `key = array[2] = 8`
   - `j = i - 1 = 1`

6. **Inner Loop Execution:**
   - `while (j >= 0 && array[j] > key)` evaluates to `while (1 >= 0 && 5 > 8)` which is false.
   - Insert `key` into sorted position:
     - `array[j + 1] = key`: `array[2] = 8`
     - Array remains: `2 5 8 4 5`

7. **Next Iteration (i = 3):**
   - `key = array[3] = 4`
   - `j = i - 1 = 2`

8. **Inner Loop Execution:**
   - `while (j >= 0 && array[j] > key)` evaluates to `while (2 >= 0 && 8 > 4)` which is true.
   - Shift `8` one position to the right:
     ```
     array[3] = array[2]
     Array becomes: 2 5 8 8 5
     ```
   - Decrement `j`: `j--` becomes `1`.
   - `while (j >= 0 && array[j] > key)` evaluates to `while (1 >= 0 && 5 > 4)` which is true.
   - Shift `5` one position to the right:
     ```
     array[2] = array[1]
     Array becomes: 2 5 5 8 5
     ```
   - Decrement `j`: `j--` becomes `0`.
   - `while (j >= 0 && array[j] > key)` evaluates to `while (0 >= 0 && 2 > 4)` which is false.

9. **Insert Key into Sorted Position:**
   - Set `array[j + 1] = key`: `array[0 + 1] = 4`
   - Array becomes: `2 4 5 8 5`

10. **Next Iteration (i = 4):**
    - `key = array[4] = 5`
    - `j = i - 1 = 3`

11. **Inner Loop Execution:**
    - `while (j >= 0 && array[j] > key)` evaluates to `while (3 >= 0 && 8 > 5)` which is true.
    - Shift `8` one position to the right:
      ```
      array[4] = array[3]
      Array becomes: 2 4 5 8 8
      ```
    - Decrement `j`: `j--` becomes `2`.
    - `while (j >= 0 && array[j] > key)` evaluates to `while (2 >= 0 && 5 > 5)` which is false.

12. **Insert Key into Sorted Position:**
    - Set `array[j + 1] = key`: `array[2 + 1] = 5`
    - Array becomes: `2 4 5 5 8`

13. **Array after Sorting:**
    ```
    Array after sorting:
    2 4 5 5 8
    ```

### Explanation of the Code Snippet:

- **Outer Loop (`for (int i = 1; i < n; i++)`):**
  - Starts from the second element (`i = 1`) and goes up to the last element (`i = n-1`).

- **Inner Loop (`while (j >= 0 && array[j] > key)`):**
  - Moves backward through the sorted part of the array (`array[0]` to `array[i-1]`).
  - Shifts elements larger than `key` (`array[i]`) one position to the right.
  - Finds the correct position for `key` and inserts it into the sorted array segment.

- **Inserting `key` (`array[j + 1] = key`):**
  - After finding the correct position (`j + 1`), inserts `key` into the sorted part of the array.

This process continues until the entire array is sorted in ascending order using the insertion sort algorithm.

----------------------------------------------------------------------------------------------------------------------------

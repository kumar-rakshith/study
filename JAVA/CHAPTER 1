09-07-2024
Time Complexity

O(n): Time complexity of a simple loop when the loop variable is incremented or decremented by a constant amount

O(logn) : Time complexity of a loop when the loop variable is divided or multiplied by a constant amount

O(n^2): Time complexity of a nested loop

---------------------------------------------------------------------------------------------------------
### Linear Seacrh for an array with O(n) notation ### 

class main {
    public static void main(String[] args) {
        int n[]={10,9,7,5,3,1};
        int t=1;
        int result = ls(n,t) ;
        
        if(result != -1)
           System.out.println("element found "+(result+1));
        else 
           System.out.println("element not found");
    }

    public static int ls(int[] n,int t){
         for(int i=0; i < n.length; i++){
              if(n[i]==t)
              return i;
         }
    return -1;
    }
}

--------------------------------------------------------------------------------------------------------------


QUEUE -- Followes first in first out principal where the elemeent that comes first goes out first

Stack -- Followes last in first out where the element that comes in last goes out last


ARRAY -- Collecction of similar types of elements in an object(arrray)

example:> int[] num ={1,3,5,7,9,11,13}

uses index value num[3] //5

---------------------------------------------------------------------------------------------------------------
Binary Search

class main {
    public static void main(String[] args) {
        int n[] = {1, 2, 3, 4, 5, 6};
        int t = 1;
        int result = ls(n, t);

        if (result != -1)
            System.out.println("element found at index " + (result + 1));
        else
            System.out.println("element not found");
    }

    public static int ls(int[] n, int t) {
        int l = 0;
        int r = n.length - 1;

        while (l <= r) {
            int mid = (l + r) / 2;

            if (n[mid] == t) {
                return mid;
            } else if (n[mid] < t) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }

        return -1; // Return -1 if element is not found
    }
}
-----------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------
## > Palindrome problem

A palindrome is a sequence of characters (such as a word, phrase, number, or other sequence) that reads the same backward 
as forward. In simpler terms, if you reverse the sequence of characters and it remains identical to the original sequence, 
then that sequence is called a palindrome.

Examples of palindromes include:

Words: "radar", "level", "madam", "racecar"
Phrases: "A man, a plan, a canal, Panama!", "Madam, in Eden, I'm Adam."
Numbers: 121, 1331, 12321
The concept of palindromes is not limited to just alphabetic characters but can apply to any sequence of characters,
including digits and punctuation marks, as long as the sequence reads the same backward and forward. Palindromes are
often used as exercises in programming and puzzles due to their simple yet intriguing nature


QUESTION >>Given an integer x, return true if x is a palindrome, and false otherwise.
ANSWER>>
class Solution {
    public boolean isPalindrome(int x) {
        if (x < 0) {
            return false;
        }
        int reversed = 0;
        int original = x;
        while (x != 0) {
            int digit = x % 10;
            reversed = reversed * 10 + digit;
            x /= 10;
        }
        return original == reversed;
    }
}
--------------------------------------------------------------------------------------------------------------
